
_site
.sass-cache
.jekyll-metadata

# node 
node_modules/

# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip
*.txt
*.doc
*.docx

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store?
._*
.idea
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
.vscode
venv

# Terragrunt
# Source: https://github.com/gruntwork-io/terragrunt/blob/master/.gitignore

.*.sw?
terragrunt.iml
vendor
.terragrunt-cache
terragrunt

# Terraform
# Source: https://github.com/github/gitignore/blob/master/Terraform.gitignore

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# .tfstate files
*.tfstate
*.tfstate.*

**/.idea
**/*.iml

**/.build-harness
**/build-harness

**/pkg

# Crash log files
crash.log

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
#
*secret.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Lock files
.terraform.lock.hcl

# MacOS
**/.DS_Store